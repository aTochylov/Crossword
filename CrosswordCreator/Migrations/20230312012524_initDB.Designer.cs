// <auto-generated />
using CrosswordCreator.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CrosswordCreator.Migrations
{
    [DbContext(typeof(CrosswordDbContext))]
    [Migration("20230312012524_initDB")]
    partial class initDB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CrosswordCreator.Data.Entities.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Word")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WordStartCol")
                        .HasColumnType("int");

                    b.Property<int>("WordStartRow")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId")
                        .IsUnique();

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("CrosswordCreator.Data.Entities.Crossword", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Crosswords");
                });

            modelBuilder.Entity("CrosswordCreator.Data.Entities.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CrosswordId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CrosswordId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("CrosswordCreator.Data.Entities.Row", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Chars")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CrosswordId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CrosswordId");

                    b.ToTable("Rows");
                });

            modelBuilder.Entity("CrosswordCreator.Data.Entities.Answer", b =>
                {
                    b.HasOne("CrosswordCreator.Data.Entities.Question", "Question")
                        .WithOne("Answer")
                        .HasForeignKey("CrosswordCreator.Data.Entities.Answer", "QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("CrosswordCreator.Data.Entities.Question", b =>
                {
                    b.HasOne("CrosswordCreator.Data.Entities.Crossword", "Crossword")
                        .WithMany("Questions")
                        .HasForeignKey("CrosswordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Crossword");
                });

            modelBuilder.Entity("CrosswordCreator.Data.Entities.Row", b =>
                {
                    b.HasOne("CrosswordCreator.Data.Entities.Crossword", "Crossword")
                        .WithMany("Rows")
                        .HasForeignKey("CrosswordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Crossword");
                });

            modelBuilder.Entity("CrosswordCreator.Data.Entities.Crossword", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("Rows");
                });

            modelBuilder.Entity("CrosswordCreator.Data.Entities.Question", b =>
                {
                    b.Navigation("Answer")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
